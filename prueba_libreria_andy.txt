//prueba de correccion a 8bits por mí (mezcla de internet, cuellar y  yo)


/* 
 * File: LCD.c  
 * Se utiliz� y se adaptaron las librer�as de Ligo George 
 * de la p�gina www.electrosome.com
 * Enlace: https://electrosome.com/lcd-pic-mplab-xc8/
 * Revision history: 
 */

//LCD Functions Developed by electroSome

#include "LCD.h"

void Lcd_Port(char a) 
{
    PORTB=a;        //los valores que vengan de Lcd_Cmd los mando al PortB
}

void Lcd_Cmd(char a) {
    RS = 0; // => RS = 0 // Dato en el puerto lo va interpretar como comando
    Lcd_Port(a);
    EN = 1; // => E = 1
    __delay_ms(4);
    EN = 0; // => E = 0
}

void Lcd_Clear(void) {
    Lcd_Cmd(0);
    Lcd_Cmd(1);
}

void Lcd_Set_Cursor(char a, char b) {
    char temp, z;
    if (a == 1) {
        temp = 0x80 + b - 1;
        z = temp;       //como es de 8bits se usa toda la variable
        Lcd_Cmd(z);     //se manda valor al puerto
        
    } else if (a == 2) {
        temp = 0xC0 + b - 1;
        z = temp;     //como es de 8bits se usa toda la variables
        Lcd_Cmd(z);   //se manda valor al puerto
        
    }
}

void Lcd_Init(void) {
    Lcd_Port(0x00);   //secuencia inicial segun data sheet para 8bits
    __delay_ms(20);   //delay de seguridad
    Lcd_Cmd(0x03);    //se manda 0011xxxx al puerto
    __delay_ms(5);    //delay de 4.1ms
    Lcd_Cmd(0x03);    //se manda 0011xxxx al puerto
    __delay_us(200);  //delay de 100us
    Lcd_Cmd(0x03);    //se madna 0011xxxx al puerto
    /////////////////////////////////////////////////////
    Lcd_Cmd(0x30);    //se manda 00110000  
    Lcd_Cmd(0x08);    //se manda 00001000
    Lcd_Cmd(0x01);    //se manda 00000001
    Lcd_Cmd(0x06);    //se manda 00000110
    /*Lcd_Cmd(0x0C);
    Lcd_Cmd(0x00);
    Lcd_Cmd(0x06);*/
}

void Lcd_Write_Char(char a) 
{
    RS = 1;             // => RS = 1
    Lcd_Port(a);       //Data transfer
    EN = 1;            //enable en 1
    __delay_us(40);     //delay recomendado
    EN = 0;             //enable en 0
    RS = 0;             //select register en 0
}

void Lcd_Write_String(char *a) {
    int i;
    for (i = 0; a[i] != '\0'; i++)
        Lcd_Write_Char(a[i]);
}

void Lcd_Shift_Right(void) {
    Lcd_Cmd(0x1c);      //se agrupan los dos nibbles en un byte
}

void Lcd_Shift_Left(void) {
    Lcd_Cmd(0x18);      //se agrupan los dos nibbles en un byte
}


